// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jasondavindev/hacktoberfest-2020/listener (interfaces: IChangesListener)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	fsnotify "gopkg.in/fsnotify.v1"
	reflect "reflect"
)

// MockIChangesListener is a mock of IChangesListener interface
type MockIChangesListener struct {
	ctrl     *gomock.Controller
	recorder *MockIChangesListenerMockRecorder
}

// MockIChangesListenerMockRecorder is the mock recorder for MockIChangesListener
type MockIChangesListenerMockRecorder struct {
	mock *MockIChangesListener
}

// NewMockIChangesListener creates a new mock instance
func NewMockIChangesListener(ctrl *gomock.Controller) *MockIChangesListener {
	mock := &MockIChangesListener{ctrl: ctrl}
	mock.recorder = &MockIChangesListenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIChangesListener) EXPECT() *MockIChangesListenerMockRecorder {
	return m.recorder
}

// CloseWatcher mocks base method
func (m *MockIChangesListener) CloseWatcher() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseWatcher")
}

// CloseWatcher indicates an expected call of CloseWatcher
func (mr *MockIChangesListenerMockRecorder) CloseWatcher() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseWatcher", reflect.TypeOf((*MockIChangesListener)(nil).CloseWatcher))
}

// EventHandler mocks base method
func (m *MockIChangesListener) EventHandler(arg0 fsnotify.Event) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventHandler", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// EventHandler indicates an expected call of EventHandler
func (mr *MockIChangesListenerMockRecorder) EventHandler(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventHandler", reflect.TypeOf((*MockIChangesListener)(nil).EventHandler), arg0)
}

// ListenEvents mocks base method
func (m *MockIChangesListener) ListenEvents() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ListenEvents")
}

// ListenEvents indicates an expected call of ListenEvents
func (mr *MockIChangesListenerMockRecorder) ListenEvents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenEvents", reflect.TypeOf((*MockIChangesListener)(nil).ListenEvents))
}

// SetupDirectoriesToWatch mocks base method
func (m *MockIChangesListener) SetupDirectoriesToWatch(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetupDirectoriesToWatch", arg0)
}

// SetupDirectoriesToWatch indicates an expected call of SetupDirectoriesToWatch
func (mr *MockIChangesListenerMockRecorder) SetupDirectoriesToWatch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupDirectoriesToWatch", reflect.TypeOf((*MockIChangesListener)(nil).SetupDirectoriesToWatch), arg0)
}

// isExcludedFile mocks base method
func (m *MockIChangesListener) isExcludedFile(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "isExcludedFile", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// isExcludedFile indicates an expected call of isExcludedFile
func (mr *MockIChangesListenerMockRecorder) isExcludedFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isExcludedFile", reflect.TypeOf((*MockIChangesListener)(nil).isExcludedFile), arg0)
}
